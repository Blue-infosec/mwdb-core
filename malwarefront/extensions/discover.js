/**
 * It's a bit confusing what you see here but it's easy to explain!
 * 
 * We don't have easy way to perform dynamic imports and module discovery.
 * This node.js script will create @malwarefront/extensions package by:
 * - discovering installed plugins in /plugins folder
 * - adding symlinks to them placed in /malwarefront/extensions/plugins
 * - adding imports to /malwarefront/extensions/plugins/index.js
 * - adding dependency entries in /malwarefront/extensions/package.json
 * 
 * So we can handle dynamic plugins delivering both backend and frontend code.
 * discover.js is run as preinstall-hook defined in /malwarefront/package.json
 */

const fs = require("fs");
const path = require('path');

let pluginsRoot = path.resolve(__dirname, '../../plugins');
let plugins = [];

if(fs.existsSync(pluginsRoot)) {
    plugins = fs.readdirSync(pluginsRoot)
} else {
    console.warn("[extensions] No plugins found.")
}

let resolverPackagePath = path.resolve(__dirname, "package.json");
let resolverPluginsDir = path.resolve(__dirname, "plugins")
let resolverIndexPath = path.resolve(resolverPluginsDir, "index.js");
let exportedIndex = [];

resolverPackage = {
    name: "@malwarefront/extensions",
    main: "extensions.js",
    private: true,
    dependencies: {}
}

try {
    fs.mkdirSync(resolverPluginsDir);
} catch(e) {}

for(let pluginName of plugins) {
    if(!fs.statSync(path.join(pluginsRoot, pluginName)).isDirectory())
        continue

    let pluginPackagePath = path.join(pluginsRoot, pluginName, "package.json")
    
    if(!fs.existsSync(pluginPackagePath))
        continue
    
    let pluginPackage = JSON.parse(fs.readFileSync(pluginPackagePath))
    let pluginRealName = pluginPackage.name;

    console.info(`[extensions] Discovered ${pluginRealName}`)

    if(resolverPackage.dependencies[pluginRealName]) {
        console.error(`[extensions] ${pluginRealName} duplicated! Interrupting.`)
        process.exit(1)
    }
    
    resolverPackage.dependencies[pluginRealName] = `file:./plugins/${pluginName}`

    try {
        fs.unlinkSync(path.join(__dirname, "plugins", pluginName))
        console.warn(`[extensions] ${path.join(__dirname, "plugins", pluginName)} already linked (clean-up...)`)
    } catch(err) {
    }
    
    fs.symlinkSync(path.join(pluginsRoot, pluginName), path.join(__dirname, "plugins", pluginName))

    exportedIndex.push(`export { default as ${pluginName} } from "${pluginRealName}"`)
}

fs.writeFileSync(resolverPackagePath, JSON.stringify(resolverPackage, null, 2))
fs.writeFileSync(resolverIndexPath, exportedIndex.join('\n'))
