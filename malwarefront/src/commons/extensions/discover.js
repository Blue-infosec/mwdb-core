const fs = require("fs");
const path = require('path');

let pluginsRoot = path.resolve(__dirname, '../../../../plugins');
let plugins = [];

if(fs.existsSync(pluginsRoot)) {
    plugins = fs.readdirSync(pluginsRoot)
} else {
    console.warn("[extensions] No plugins found.")
}

let resolverPackagePath = path.resolve(__dirname, "package.json");
let resolverIndexPath = path.resolve(__dirname, "plugins", "index.js");
let resolverPackage = JSON.parse(fs.readFileSync(resolverPackagePath));
let exportedIndex = [];

resolverPackage.dependencies = {}

for(let pluginName of plugins) {
    if(!fs.statSync(path.join(pluginsRoot, pluginName)).isDirectory())
        continue

    let pluginPackagePath = path.join(pluginsRoot, pluginName, "package.json")
    
    if(!fs.existsSync(pluginPackagePath))
        continue
    
    let pluginPackage = JSON.parse(fs.readFileSync(pluginPackagePath))
    let pluginRealName = pluginPackage.name;

    console.info(`[extensions] Discovered ${pluginRealName}`)

    if(resolverPackage.dependencies[pluginRealName]) {
        console.error(`[extensions] ${pluginRealName} duplicated! Interrupting.`)
        process.exit(1)
    }
    
    resolverPackage.dependencies[pluginRealName] = `file:./plugins/${pluginName}`

    try {
        fs.unlinkSync(path.join(__dirname, "plugins", pluginName))
        console.warn(`[extensions] Found ${path.join(__dirname, "plugins", pluginName)}, unlinked...`)
    } catch(err) {
    }
    fs.symlinkSync(path.join(pluginsRoot, pluginName), path.join(__dirname, "plugins", pluginName))

    exportedIndex.push(`export { default as ${pluginName} } from "${pluginRealName}"`)
}

fs.writeFileSync(resolverPackagePath, JSON.stringify(resolverPackage, null, 2))
fs.writeFileSync(resolverIndexPath, exportedIndex.join('\n'))
