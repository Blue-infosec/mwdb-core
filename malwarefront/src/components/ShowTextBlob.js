import React, {Component} from 'react';
import { Link } from "react-router-dom";
import ShowObject from "./ShowObject";
import {ShowConfigBox} from "./ShowConfig";

import {FontAwesomeIcon} from '@fortawesome/react-fontawesome'
import AceEditor from 'react-ace';

import api from "@malwarefront/api";
import { makeSearchLink, makeSearchDateLink, downloadData } from '@malwarefront/helpers';
import { View, DateString, Extendable } from "@malwarefront/ui";

import 'brace/mode/text';
import 'brace/theme/github';
import 'brace/ext/searchbox';

class TextBlobPresenter extends Component {
    handleBlobDownload = (event) => {
        event.preventDefault();
        downloadData(this.props.content, this.props.id, 'text/plain');
    };

    render() {
        const fieldStyle = {
            wordBreak: 'break-all'
        };
        return (
        <Extendable ident="showTextBlobPresenter" object={this.props}>
            <div className="card-header">
                <div className="media row" style={fieldStyle}>
                    <Extendable ident="showTextBlobHeader" object={this.props}>
                        <div className="align-self-center media-body">
                            {this.props.header || <h5 className="mt-0">Blob <span class="text-monospace">{this.props.id}</span></h5>}
                        </div>
                        <div className="ml-3">
                            <Extendable ident="showTextBlobButtons" object={this.props}>
                                <Link to={`/relations?node[]=${this.props.id}`}>
                                    <button className="btn btn-primary" style={{"marginRight": "8pt"}}>
                                        <FontAwesomeIcon icon="project-diagram" pull="left" size="x"/>
                                        Relations
                                    </button>
                                </Link>
                                <button onClick={this.handleBlobDownload} target="_self" className="btn btn-primary">
                                    <FontAwesomeIcon icon="download" pull="left" size="x"/>
                                    Download blob
                                </button>
                            </Extendable>
                        </div>
                    </Extendable>
                </div>
            </div>
                <table className="table table-striped table-bordered table-hover file-table"
                       id="sample-table">
                    <tbody id="sample_body">
                    <Extendable ident="showTextBlobAttributes" object={this.props}>
                    <tr>
                        <th>Blob name</th>
                        <td id="blob_name"><a href={makeSearchLink("name", this.props.blob_name, false, "blobs")}>{this.props.blob_name}</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Blob size</th>
                        <td id="blob_size"><a href={makeSearchLink("size", this.props.blob_size, false, "blobs")}>{this.props.blob_size}</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Blob type</th>
                        <td id="blob_type"><a href={makeSearchLink("type", this.props.blob_type, false, "blobs")}>{this.props.blob_type}</a>
                        </td>
                    </tr>
                    
                    <tr>
                        <th>First seen</th>
                        <td id="upload_time"> {
                            this.props.upload_time
                                ? <a href={makeSearchDateLink("upload_time", this.props.upload_time, "blobs")}><DateString date={this.props.upload_time}/></a>
                                : []
                        }</td>
                    </tr>
                    <tr>
                        <th>Last seen</th>
                        <td id="last_seen"> {
                            this.props.last_seen
                                ? <a href={makeSearchDateLink("last_seen", this.props.last_seen, "blobs")}><DateString date={this.props.last_seen}/></a>
                                : []
                        }</td>
                    </tr>
                    </Extendable>
                    </tbody>
                </table>
        </Extendable>)
    }
}

class TextBlobContentPresenter extends Component {
    constructor(props) {
        super(props);
        this.aceEditor = React.createRef();
    }

    componentDidMount() {
        this.aceEditor.current.editor.gotoLine(1);
    }

    render() {
        return ( <div>
            <div className="card-header">
                <div className="media row">
                    <div className="align-self-center media-body">
                        Blob content
                    </div>
                    <div className="ml-3">
                        <Link to={`/search?diff=${this.props.id}`}>
                            <button target="_self" className="btn btn-primary">
                                <FontAwesomeIcon icon="random" pull="left" size="x"/>
                                Diff with...
                            </button>
                        </Link>
                    </div>
                </div>
            </div>
            <AceEditor
                ref={this.aceEditor}
                mode="text"
                theme="github"
                name="blob-content"
                value={this.props.content}
                readOnly
                wrapEnabled
                width="100%"
                fontSize="16px"
                setOptions={{
                    showInvisibles: true
                }}
            />
        </div>)
    }
}

class ShowTextBlob extends Component {
    state = {
        error: null,
        blob: {
            children: []
        }
    };

    async updateTextBlob() {
        try {
            let response = await api.getObject("blob", this.props.match.params.hash);
            this.setState({blob: response.data, error: null});
        } catch(error) {
            this.setState({error});
        }
    }

    componentDidMount() {
        this.updateTextBlob()
    }

    componentDidUpdate(prevProps) {
        if (prevProps !== this.props)
            this.updateTextBlob();
    };

    render() {
        return (
            <View fluid ident="showTextBlob" error={this.state.error}>
                <ShowObject object={this.state.blob} objectPresenterComponent={TextBlobPresenter} searchEndpoint="blobs">
                    {
                        this.state.blob.content 
                        ? <TextBlobContentPresenter {...this.state.blob} />
                        : []
                    }
                    {
                        this.state.blob.latest_config
                        ? <ShowConfigBox config={this.state.blob.latest_config}
                                         objectOnly
                                         header={<Link to={`/config/${this.state.blob.latest_config.id}`}>Latest parsed config</Link>} />
                        : []
                    }
                </ShowObject>
            </View>
        );
    }
}

export default ShowTextBlob;
