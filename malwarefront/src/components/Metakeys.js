import React, {Component} from 'react';
import { connect } from 'react-redux';

import api from "@malwarefront/api";
import { ConfirmationModal } from "@malwarefront/ui";

class MetakeyItem extends Component {
    render() {
        return (<tr>
            <td><strong>{this.props.metakey.key}</strong></td>
            <td>{this.props.metakey.url ? <a href={this.props.metakey.url}>{this.props.metakey.value}</a> : this.props.metakey.value}</td>
        </tr>)
    }
}

class MetakeyForm extends Component {
    state = {
        key: "",
        value: "",
    }

    handleSubmit = (e) => {
        e.preventDefault();
        if (!this.state.key || !this.state.value) {
            return;
        }

        this.props.onMetakeySubmit(this.state.key, this.state.value);
        this.setState({
            key: "",
            value: ""
        });
    };

    updateInputValue(what, evt) {
        let newState = {};
        newState[what] = evt.target.value;
        this.setState(newState);
    };

    render() {
        return (
            <form className="tagForm" onSubmit={this.handleSubmit}>
                <div className="input-group">
                    <input className="form-control" type="text" placeholder="Key" value={this.state.key}
                           onChange={(evt) => this.updateInputValue("key", evt)} />
                    <input className="form-control" type="text" placeholder="Value" value={this.state.value}
                           onChange={(evt) => this.updateInputValue("value", evt)} />
                    <div className="input-group-append">
                        <input className="btn btn-outline-success" type="submit" value="Add"/>
                    </div>
                </div>

            </form>
        );
    };
}

class MetakeyBox extends Component {
    state = {
        metakeys: [],
        modalIsOpen: false,
        metakeyToAdd: {}
    }
    
    openModal = (key, value) => {
        this.setState({modalIsOpen: true, metakeyToAdd: {key, value}});
    };

    closeModal = () => {
        this.setState({modalIsOpen: false});
    };

    updateMetakeys = async () => {
        if(this.props.id === undefined)
            return;
        try {
            let response = await api.getObjectMetakeys(this.props.id)
            this.setState({
                metakeys: response.data.metakeys
            });
        } catch(error) {

        }
    };

    metakeySubmit = async (key, value) => {
        try {
            this.setState({modalIsOpen: false})
            await api.addObjectMetakey(this.props.id, key, value)
            this.updateMetakeys();
        } catch(error) {

        }
    };

    handleMetakeySubmit = (key, value) => {
        this.openModal(key, value)
    };

    componentDidUpdate = (prevProps) => {
        if (prevProps !== this.props)
            this.updateMetakeys();
    };

    render() {
        return (
        <div className="card card-default">
            <ConfirmationModal isOpen={this.state.modalIsOpen}
                               onRequestClose={this.closeModal}
                               onConfirm={(e) => this.metakeySubmit(this.state.metakeyToAdd.key, this.state.metakeyToAdd.value)}
                               message={`Add a metakey ${this.state.metakeyToAdd.key} with value ${this.state.metakeyToAdd.value}?`}
                               confirmText="Add"
                               buttonStyle="bg-success"/>
            <div className="card-header">
                <div className="media">
                        <div className="align-self-center media-body">
                            Attributes
                        </div>
                    </div>
                </div>
                {
                    this.state.metakeys.length > 0
                    ? <table className="table table-striped table-bordered wrap-table">
                        <thead>
                            <tr>
                                <th key="key">Key</th>
                                <th key="value">Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            { this.state.metakeys.map((item, idx) => <MetakeyItem key={idx} metakey={item}/>) }
                        </tbody>
                    </table>
                    : <div className="card-body text-muted">No attributes to display</div>
                }
                {
                    this.props.canAddMetakeys &&
                    <MetakeyForm onMetakeySubmit={this.handleMetakeySubmit}/>
                }
        </div>)
    }
}

function mapStateToProps(state, ownProps)
{
    return {
        ...ownProps,
        canAddMetakeys: state.auth.loggedUser.capabilities.includes("adding_attributes"),
    }
}
export default connect(mapStateToProps)(MetakeyBox);
