import React, {Component} from 'react';

import _ from "lodash";

import api from "@malwarefront/api";
import { Alert } from "@malwarefront/ui";


class MetakeyUpdate extends Component {
    state = {
        metakey: "",
        template: "",
        error: null,
    };

    async handleUpdate() {
        let metakey = this.props.match.params.metakey;
        try {
            let response = await api.getMetakeyDefinition(metakey)
            let data = {
                template: response.data.template
            };

            this.setState({
                error: null,
                ...(_.fromPairs(
                    _.toPairs(data).reduce((p, c) => p.concat([c], [["original_"+c[0], c[1]]]), [])
                ))
            })
        } catch(error) {
            this.setState({error})
        }
    }

    changedFields() {
        let fields = ["template"];
        let changed = fields.reduce((p, c) => p.concat(this.state[c] !== this.state["original_"+c] ? c : []), []);
        return changed;
    }

    componentDidMount() {
        this.handleUpdate();
    }

    handleInputChange = (event) => {
        const target = event.target;
        const value = target.type === 'checkbox' ? target.checked : target.value;
        const name = target.name;

        this.setState({
            [name]: value,
        });
    }

    handleSubmit = async (event) => {
        event.preventDefault();
        let metakey = this.props.match.params.metakey;
        try {
            await api.addMetakeyDefinition(metakey, this.state.template)
            this.handleUpdate()
        } catch(error) {
            this.setState({error});
        }
    }

    render() {
        let changeNotifier = (field) => {
            return this.state[field] !== this.state["original_"+field] ? <span style={{color: "red"}}>*</span> : <span/>
        };

        return (
            <div className="container">
                <Alert error={this.state.error} />
                <h2>Set attribute {this.props.match.params.metakey} URL template</h2>
                <form onSubmit={this.handleSubmit}>
                    <div className="form-group">
                        <label>{changeNotifier("template")}URL template</label>
                        <input type="text" name="template" value={this.state.template}
                               onChange={this.handleInputChange} className="form-control" required />
                        <div className="form-hint">Provide URL template for specified attribute with $value as placeholder (e.g. http://system.cert.pl/job/$value)</div>
                    </div>

                    <button type="submit" className="btn btn-primary">Submit</button>
                </form>
            </div>
        );
    }
}

export default MetakeyUpdate;
