import React, {Component} from 'react';
import {Link} from 'react-router-dom';
import ShowObject from "./ShowObject";

import {FontAwesomeIcon} from '@fortawesome/react-fontawesome'

import api from "@malwarefront/api";
import { makeSearchConfigElementLink, makeSearchLink, makeSearchDateLink, downloadData } from "@malwarefront/helpers";
import { DateString, ObjectLink, View, Extendable, Extension } from "@malwarefront/ui";

class ConfigRow extends Component {
    constructor(props){
        super(props)

        this.state = {
            open: false,
            name: this.props.name,
        }

        if(this.isValueObject()) {
            this.state.raw = this.state.value = JSON.stringify(this.props.value, null, 4)
        } else 
        if(this.isValueBlob()) {
            this.state.raw = this.props.value["in-blob"];
            this.state.value = <ObjectLink type="blob" id={this.props.value["in-blob"]} className="blob" />
        } else {
            this.state.raw = this.state.value = String(this.props.value)
            if (this.props.path === null) {
                // Approximate search for nested array fields (array searching not supported)
                if(this.state.name >>> 0 === parseFloat(this.state.name))
                {
                    // Is key an integer? (Array element)
                    this.state.value = <Link to={`${(makeSearchConfigElementLink(this.props.value))}`}>{this.state.value}</Link>
                } else {
                    // If not - it is object element
                    this.state.value = <Link to={`${(makeSearchConfigElementLink(this.state.name, this.props.value))}`}>{this.state.value}</Link>
                }
            } else {
                // Known path - direct config searching
                this.state.value = (
                    <Link to={`${(makeSearchLink(`cfg.${this.props.path.join('.')}`, this.props.value, false, "configs"))}`}>
                        {this.state.value}
                    </Link>)
            }
        }
    }

    isValueObject() {
        return this.props.value && typeof this.props.value === 'object' && !this.props.value["in-blob"];
    }

    isValueBlob() {
        return this.props.value && typeof this.props.value === 'object' && this.props.value["in-blob"];
    }

    componentDidMount() {
        if(this.props.parentExpanded && this.isValueObject())
            this.setState({open: true})
    }

    componentDidUpdate(prevProps) {
        if(this.props.parentExpanded !== prevProps.parentExpanded && this.props.parentExpanded && this.isValueObject())
            this.setState({open: true})
    }

    _toggle() {
        this.setState({
            open: !this.state.open
        })
    }

    render() { 
        const overflow = {
            maxWidth: '700px',
            textOverflow: 'ellipsis',
            overflow: 'hidden',
            whiteSpace: 'nowrap'
        }

        return (
            <React.Fragment>
                <tr>
                    <th style={{cursor: 'pointer'}} onClick={this._toggle.bind(this)}>
                        <FontAwesomeIcon icon={this.state.open ? "minus" : "plus"} size="sm"/>&nbsp;
                        {this.state.name}
                    </th>
                    {this.state.open && !this.isValueObject() ? (
                        <td>
                            <pre style={{whiteSpace: 'pre-wrap'}}>{this.state.raw}</pre>
                        </td>
                    ) : (
                        <td id={this.state.name} style={overflow} className="text-monospace">{this.state.value}</td>
                    )}
                </tr>
                {this.state.open && this.isValueObject() ? (
                    <tr className="nested">
                        <td className="nested" colspan="2" style={{ padding: 0 }}>
                            <ConfigTable cfg={this.props.value}
                                         parentExpanded={true}
                                         indent={ this.props.indent + 1}
                                         path={ this.props.path }/>
                        </td>
                    </tr>
                ) : []}
            </React.Fragment>
        )
    }
}

class ConfigTable extends Component {
    configKeys() {
        let keys = Object.keys(this.props.cfg);
        if(!Array.isArray(this.props.cfg))
            return keys.sort()
        return keys
    }

    render() {
        let indentLevel = this.props.indent || 0
        let indent = `${indentLevel * 8}pt`;
        
        function TopLevel(props) {
            return !indentLevel ? props.children : []
        }

        return (
            <table className={`table table-striped table-bordered table-hover file-table ${this.props.indent > 0 ? "nested" : ""}`}
                   id="config-table"
                   style={{
                        marginLeft: indent,
                        width: `calc(100% - ${indent})`,
                   }}>
                <tbody id="config_body">
                    <TopLevel>
                        <Extension ident={"showConfigAttributesBefore"} object={this.props}/>
                        <tr>
                            <th>Family</th>
                            <td id="config_family"><a href={makeSearchLink("family", this.props.family, false, "configs")}>{this.props.family}</a></td>
                        </tr>
                        <tr>
                            <th>Config type</th>
                            <td id="config_family"><a href={makeSearchLink("type", this.props.config_type, false, "configs")}>{this.props.config_type}</a></td>
                        </tr>
                    </TopLevel>
                    {this.configKeys().map((object) => <ConfigRow name={object} 
                                                                  value={this.props.cfg[object]} 
                                                                  parentExpanded={this.props.parentExpanded}
                                                                  path={Array.isArray(this.props.cfg) || !this.props.path
                                                                        ? null : this.props.path.concat([object]) }
                                                                  indent={indentLevel} />)}
                    <TopLevel>
                        <tr>
                            <th>Upload time</th>
                            <td id="upload_time"> {
                                this.props.upload_time
                                    ? <a href={makeSearchDateLink("upload_time", this.props.upload_time, "configs")}>
                                        <DateString date={this.props.upload_time}/>
                                      </a>
                                    : []
                            }</td>
                        </tr>
                        <Extension ident={"showConfigAttributesAfter"} object={this.props}/>
                    </TopLevel>
                 </tbody>
            </table>
        )
    }
}

class ConfigPresenter extends Component {
    handleConfigDownload = (event) => {
        event.preventDefault();
        downloadData(JSON.stringify(this.props.cfg), this.props.id, 'application/json');
    };

    render() {
        const fieldStyle = {
            wordBreak: 'break-all'
        };
        return (
        <div className="card card-default">
            <Extendable ident="showConfigPresenter" object={this.props}>
                <div className="card-header" >
                    <div className="media row" style={fieldStyle}>
                        <Extendable ident="showConfigHeader" object={this.props}>
                            <div className="align-self-center media-body">
                                {this.props.header || <h5 className="mt-0">Config <span class="text-monospace">{this.props.id}</span></h5>}
                            </div>
                            <div className="ml-3">
                                <Extendable ident="showConfigButtons" object={this.props}>
                                    <Link to={`/relations?node[]=${this.props.id}`}>
                                        <button className="btn btn-primary" style={{"marginRight": "8pt"}}>
                                            <FontAwesomeIcon icon="project-diagram" pull="left" size="x"/>
                                            Relations
                                        </button>
                                    </Link>
                                    <button onClick={this.handleConfigDownload} target="_self" className="btn btn-primary">
                                        <FontAwesomeIcon icon="download" pull="left" size="x"/>
                                        Download config
                                    </button>
                                </Extendable>
                            </div>
                        </Extendable>
                    </div>
                </div>
                <ConfigTable {...this.props} path={[]} />
            </Extendable>
        </div>)
    }
}

export class ShowConfigBox extends Component {
    state = {
        config: {
            cfg: {}
        }
    };

    async updateConfig() {
        if(this.props.config)
        {
            this.setState({
                config: this.props.config
            })
            return;
        }
        try {
            let response = await api.getObject("config", this.props.configId)
            this.setState({
                config: response.data
            });
        } catch(error) {
            if(this.props.onError)
                this.props.onError(error)
        }
    }

    componentDidMount() {
        this.updateConfig()
    }

    componentDidUpdate(prevProps) {
        if (prevProps !== this.props)
            this.updateConfig();
    };

    render() {
        return (
            this.props.objectOnly
                ? <ConfigPresenter {...this.state.config} header={this.props.header}/>
                : <ShowObject object={this.state.config} objectPresenterComponent={ConfigPresenter} searchEndpoint="configs"/>
        );
    }
}

class ShowConfig extends Component {
    state = {
        error: null,
    };

    render() {
        return (
            <View fluid ident="showConfig" error={this.state.error}>
                <ShowConfigBox configId={this.props.match.params.hash} onError={(error) => this.setState({"error": error})}/>
            </View>
        );
    }
}

export default ShowConfig;
