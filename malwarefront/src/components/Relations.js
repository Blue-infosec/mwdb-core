import React, {Component} from 'react';
import {Tag} from './Tag';

import { ObjectLink } from '@malwarefront/ui';

class RelationsBox extends Component {
    render() {
        const parents = (this.props.parents || [])
            .map((parent, index, array) =>
                <tr>
                    <th>parent</th>
                    <td><span><ObjectLink {...parent} 
                                          diffWith={parent.type === "text_blob" && (array[index + 1] || {}).id}/></span></td>
                    <td>
                        {parent.tags.map(tag =><Tag key={tag.tag} tag={tag.tag}/>)}
                    </td>
                </tr>
            );

        const children = (this.props.children || [])
            .map((child, index, array) =>
                <tr>
                    <th>child</th>
                    <td><span><ObjectLink {...child }
                                          diffWith={child.type === "text_blob" && (array[index + 1] || {}).id}/></span></td>
                    <td>
                        {child.tags.map(tag =><Tag key={tag.tag} tag={tag.tag}/>)}
                    </td>
                </tr>
            );

        return (
            <div className="card card-default">
                <div className="card-header">
                    { this.props.header || "Relations" }
                </div>
                {
                    parents.length + children.length > 0 ?
                    <table className="table table-striped table-bordered table-hover" id="rel_table">
                        <tbody id="rel_body">
                        { parents }
                        { children }
                        </tbody>
                    </table> : <div className="card-body text-muted">No relations to display</div>
                }
            </div>
        );
    }
}

class MultiRelationsBox extends Component {
    render() {
        let TypedRelationsBox = (props) => {
            let filterByType = function(arr) { return arr.filter(e => e.type === props.type) }
            let filteredElements = {
                parents: filterByType(props.parents),
                children: filterByType(props.children)
            }
            if(filteredElements.parents.length + filteredElements.children.length > 0)
                return <RelationsBox {...filteredElements} header={props.header} />
            else
                return <div/>
        }
        
        let parents = this.props.parents;
        let children = this.props.children;

        return (
            parents && children && (parents.length + children.length > 0) ?
                <div>
                    <TypedRelationsBox header="Related samples" type="file" {...{parents, children}}/>
                    <TypedRelationsBox header="Related configs" type="static_config" {...{parents, children}}/>
                    <TypedRelationsBox header="Related blobs" type="text_blob" {...{parents, children}}/>
                </div> :
                <RelationsBox/>
        )
    }
}


export default MultiRelationsBox;
