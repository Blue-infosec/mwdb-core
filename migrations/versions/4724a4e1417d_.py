"""empty message

Revision ID: 4724a4e1417d
Revises: fea4bc808004
Create Date: 2019-03-11 11:16:26.491550

"""
from alembic import op
import sqlalchemy as sa
import sys


# revision identifiers, used by Alembic.
revision = '4724a4e1417d'
down_revision = 'fea4bc808004'
branch_labels = None
depends_on = None

user_helper = sa.Table(
    'user',
    sa.MetaData(),
    sa.Column('id', sa.Integer()),
    sa.Column('login', sa.String(32)),
    sa.Column('group_id', sa.Integer()),
    sa.Column('group_name', sa.String(32))
)

group_helper = sa.Table(
    'group',
    sa.MetaData(),
    sa.Column('id', sa.Integer()),
    sa.Column('name', sa.String(32))
)

permission_helper = sa.Table(
    'permission',
    sa.MetaData(),
    sa.Column('object_id', sa.Integer()),
    sa.Column('group_id', sa.Integer()),
    sa.Column('group_name', sa.String(32))
)

comment_helper = sa.Table(
    'comment',
    sa.MetaData(),
    sa.Column('id', sa.Integer()),
    sa.Column('user_login', sa.String(32)),
    sa.Column('user_id', sa.Integer())
)


def upgrade():
    group_id_seq = sa.Sequence('group_id_seq')
    user_id_seq = sa.Sequence('user_id_seq')

    op.execute(sa.schema.CreateSequence(group_id_seq))
    op.execute(sa.schema.CreateSequence(user_id_seq))

    op.add_column('comment', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('group',
                  sa.Column('id', sa.Integer(), group_id_seq,
                            autoincrement=True, server_default=group_id_seq.next_value()))
    op.add_column('permission', sa.Column('group_id', sa.Integer(), autoincrement=False))
    op.add_column('user', sa.Column('group_id', sa.Integer(), nullable=True))
    op.add_column('user', sa.Column('id', sa.Integer(), user_id_seq, autoincrement=True,
                                    server_default=group_id_seq.next_value()))

    connection = op.get_bind()

    user_maxidx = 1
    group_maxidx = 1

    for idx, gr in enumerate(connection.execute(group_helper.select())):
        print("Remapping group {}".format(gr.name), file=sys.stderr)
        connection.execute(
            group_helper.update(
                group_helper.c.name == gr.name
            ).values(
                id=(idx+1)
            )
        )
        print("=> users".format(gr.name), file=sys.stderr)
        connection.execute(
            user_helper.update(
                user_helper.c.group_name == gr.name
            ).values(
                group_id=(idx + 1)
            )
        )
        print("=> permissions".format(gr.name), file=sys.stderr)
        connection.execute(
            permission_helper.update(
                permission_helper.c.group_name == gr.name
            ).values(
                group_id=(idx+1)
            )
        )
        group_maxidx = idx+2

    connection.execute("ALTER SEQUENCE group_id_seq RESTART WITH {};".format(group_maxidx))

    for idx, usr in enumerate(connection.execute(user_helper.select())):
        print("Remapping user {}".format(usr.login), file=sys.stderr)
        connection.execute(
            user_helper.update(
                user_helper.c.login == usr.login
            ).values(
                id=(idx+1)
            )
        )
        connection.execute(
            comment_helper.update(
                comment_helper.c.user_login == usr.login
            ).values(
                user_id=(idx + 1)
            )
        )
        user_maxidx = idx + 2

    connection.execute("ALTER SEQUENCE user_id_seq RESTART WITH {};".format(user_maxidx))

    op.drop_constraint('comment_user_login_fkey', 'comment', type_='foreignkey')
    op.drop_column('comment', 'user_login')
    op.drop_constraint('permission_group_name_fkey', 'permission', type_='foreignkey')
    op.drop_column('permission', 'group_name')
    op.drop_constraint('user_group_name_fkey', 'user', type_='foreignkey')
    op.drop_column('user', 'group_name')
    op.drop_constraint('user_pkey', 'user', type_='primary')
    op.drop_constraint('group_pkey', 'group', type_='primary')
    op.alter_column('file', 'file_name',
                    existing_type=sa.VARCHAR(),
                    nullable=True)
    op.alter_column('permission', 'group_id',
                    nullable=False)
    op.alter_column('file', 'file_type',
                    existing_type=sa.TEXT(),
                    nullable=True)
    op.alter_column('group', 'id',
                    nullable=False)
    op.alter_column('user', 'id',
                    nullable=False)
    op.create_primary_key('pk_user', 'user', ['id'])
    op.create_primary_key('pk_group', 'group', ['id'])
    op.create_foreign_key(None, 'comment', 'user', ['user_id'], ['id'])
    op.create_foreign_key(None, 'permission', 'group', ['group_id'], ['id'])
    op.create_foreign_key(None, 'user', 'group', ['group_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('group_name', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user', type_='foreignkey')
    op.create_foreign_key('user_group_name_fkey', 'user', 'group', ['group_name'], ['name'])
    op.drop_column('user', 'id')
    op.drop_column('user', 'group_id')
    op.create_index('trgm_idx_text_blob_content', 'text_blob', ['content'], unique=False)
    op.add_column('permission', sa.Column('group_name', sa.VARCHAR(length=32), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'permission', type_='foreignkey')
    op.create_foreign_key('permission_group_name_fkey', 'permission', 'group', ['group_name'], ['name'])
    op.drop_column('permission', 'group_id')
    op.drop_column('group', 'id')
    op.alter_column('file', 'file_type',
               existing_type=sa.TEXT(),
               nullable=False)
    op.alter_column('file', 'file_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('comment', sa.Column('user_login', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'comment', type_='foreignkey')
    op.create_foreign_key('comment_user_login_fkey', 'comment', 'user', ['user_login'], ['login'])
    op.drop_column('comment', 'user_id')
    # ### end Alembic commands ###
