import os

from bottle import HTTPError

from db.malware import InsertRet
from libs.extractor import extract
from libs.objects import File, Config
from libs.repository import store_sample, get_sample_path, file_name, is_raw_ext
from libs.web import *
from libs.analysis import analyze_sample, check_and_process_email
from libs.objects import Config


def _add_malware(via=None):
    tags = request.forms.get("tags")
    src = request.forms.get('from')
    default_user = Config().api.default_user
    via = via or db.user or request.forms.get('via')
    if via == default_user and request.forms.get('via'):
        ## special case of setting owners vi hand
        via = request.forms.get('via')
    cmt = request.forms.get('cmt')
    sharable = json.loads(request.forms.get('share', 'true'))
    do_extrct = json.loads(request.forms.get('extract', 'true'))

    data = request.files.file
    filename = data.filename
    data_b = data.file.read()

    if check_and_process_email(filename, data_b):
        return {'error': 'email'}

    info = File(file_path=store_sample(data_b))
    ret, p = db.add(obj=info, file_name=data.filename, tags=tags, src=src, via=via, comment=cmt, sharable=sharable)
    is_archive = False
    if do_extrct and not p.children \
            and not os.path.splitext(filename)[-1] in ['.doc', '.docm', '.xls', '.xlsm', '.docx']:

        for inf in extract(filename, data_b):

            if not inf.f.filesize:
                continue

            if check_and_process_email(inf.filename, inf.data):
                continue

            if not inf.filename.strip() and ('spam' in tags or via == 'spamtrap'):
                ## kovter+locky spam...
                continue

            f = File(file_path=store_sample(inf.data))
            ## inherit from parent
            cmt2 = cmt
            if inf.comment:
                cmt2 += "\n" + inf.comment

            t = (tags if tags else '') + (',' + ','.join(inf.tags) if inf.tags else '')
            r, x = db.add(obj=f, file_name=inf.filename, tags=t, src=src, via=via, comment=cmt2, sharable=sharable)
            if x:
                db.add_xref(p if p.sha256 == inf.parent else inf.parent, x)

            is_archive = True

    if ret == InsertRet.error:
        raise HTTPError(500, "Database error")

    if is_archive:
        db.add_tag(p, 'archive')

    return {"filepath": info.file_path.replace(Config().api.repository, ''), "duplicate": ret == InsertRet.duplicate}


@app.route("/malware/recent/<max:int>")
@app.route("/malware/recent")
def recent(max=100):
    return jsonize(map(low_details, db.recent(max)))


@app.route("/malware/add_cuckoo", method='POST')
def add_cuckoo():
    cid = request.forms.get('cid')
    mid = request.forms.get('hash')
    db.add_cuckoo(mid, cid)
    return jsonize({'success': True})


@app.route("/malware/add_source", method='POST')
def add_source():
    cid = request.forms.get('from')
    mid = request.forms.get('hash')
    db.add_source(mid, cid)
    return jsonize({'success': True})


@app.route("/malware/add_config", method='POST')
def add_cfg():
    cid = request.forms.get('cfg')
    mid = request.forms.get('hash')
    db.add_config(mid, cid)
    return jsonize({'success': True})


@app.route('/malware/add_xref', method='POST')
def add_xref():
    pid = request.forms.get('parent')
    cid = request.forms.get('child')
    db.add_xref(pid, cid)
    return jsonize({'success': True})


@app.route("/malware/add", method="POST")
def add_malware():
    return jsonize(_add_malware())


@app.route("/malware/get/<sha256>", method="GET")
def get_malware(sha256):
    path = get_sample_path(sha256)
    if not path:
        raise HTTPError(404, "File not found")

    response.content_length = os.path.getsize(path)
    response.content_type = "application/octet-stream; charset=UTF-8"
    with open(path, "rb") as f:
        data = f.read()

    return data


@app.route("/malware/ancestors", method=["GET", "POST"])
@app.route("/malware/ancestors/<hash>", method="GET")
@has_params
def get_ancestors(hash=None):
    m = db.find_via_hash(hash)
    return jsonize(map(low_details, m.ancestors()))


@app.route("/malware/descendants", method=["GET", "POST"])
@app.route("/malware/descendants/<hash>", method="GET")
@has_params
def get_descendants(hash=None):
    m = db.find_via_hash(hash)
    return jsonize(map(low_details, m.descendants()))


@app.route("/malware/sample", method=["GET", "POST"])
@app.route("/malware/sample/<hash>", method="GET")
@has_params
def get_sample(hash=None):
    print `request.auth`
    row = db.find_via_hash(hash)
    if row:
        return jsonize(details(row))
    raise HTTPError(404, "File not found")


@app.route('/malware/analyze/<hash>', method='GET')
@app.route('/malware/analyze', method=['GET', 'POST'])
@has_params
def submit_md5(hash):
    ctx = {'_dont_run': json.loads(request.forms.get('dont_run', 'False').lower()),
           '_base': int(request.forms.get('_base', '0'), 16),
           '_memdump': json.loads(request.forms.get('memdump', 'False').lower()),
           '_raw': json.loads(request.forms.get('_raw', 'False').lower())}
    m = db.find_via_hash(hash)
    if not m:
        return HTTPError(404, 'No sample with such hash')

    ctx['_data'] = {'path': get_sample_path(m.sha256)}
    ctx['_hash'] = m.sha256
    ctx['_name'] = file_name(m)
    ctx['tags'] = filter(None, request.forms.get('tag', '').strip().split(','))

    if is_raw_ext(ctx['_name']):
        ctx['_raw'] = True

    return jsonize({'task_id': analyze_sample(ctx)})

