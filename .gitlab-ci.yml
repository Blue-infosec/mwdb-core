image: certpl/docker-ci-base:latest

variables:
  DOCKER_REGISTRY: dr.cert.pl/malwarecage
  GIT_SUBMODULE_STRATEGY: none
  DOCKER_BUILDKIT: 1

services:
  - docker:dind

stages:
  - build
  - test
  - deploy

before_script:
  - echo "Start job $CI_BUILD_NAME" at `date +%Y-%m-%d-%H-%M-%S`
  - echo "CI_PIPELINE_ID $CI_PIPELINE_ID"
  - chmod +x build-image.sh
  - eval $(ssh-agent -s)
  - echo "$GIT_DEPLOY_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -H vcs.cert.pl >> ~/.ssh/known_hosts
  # This is really weird glitch in Gitlab Runner, we need to forcefully
  # clean submodules and reinit them manually
  - git submodule deinit --all --force
  - git submodule update --init --recursive
  - docker login -u "$DOCKER_REGISTRY_LOGIN" -p "$DOCKER_REGISTRY_PASSWORD" "$DOCKER_REGISTRY"
  - mkdir -p artifacts/test
  - export CI_COMMIT_REF_NAME=`echo -n $CI_COMMIT_REF_NAME | sed 's#/#-#g'`

build_mwdb:
  stage: build
  script:
    - ./build-image.sh "$DOCKER_REGISTRY/malwarecage_mwdb" ". -f ./deploy/docker/Dockerfile"

build_mwdb_tests:
  stage: build
  script:
    - ./build-image.sh "$DOCKER_REGISTRY/malwarecage_mwdb-tests" "tests -f ./tests/Dockerfile"

build_malwarefront:
  stage: build
  script:
    - ./build-image.sh "$DOCKER_REGISTRY/malwarecage_malwarefront" ". -f ./deploy/docker/Dockerfile-malwarefront"

test_mwdb:
  stage: test
  script:
    - docker pull $DOCKER_REGISTRY/malwarecage_mwdb:$CI_COMMIT_SHA > /dev/null
    - docker pull $DOCKER_REGISTRY/malwarecage_mwdb-tests:$CI_COMMIT_SHA > /dev/null
    - docker pull $DOCKER_REGISTRY/malwarecage_malwarefront:$CI_COMMIT_SHA > /dev/null
    
    - docker tag $DOCKER_REGISTRY/malwarecage_mwdb:$CI_COMMIT_SHA malwarecage_mwdb:latest
    - docker tag $DOCKER_REGISTRY/malwarecage_mwdb-tests:$CI_COMMIT_SHA malwarecage_mwdb-tests:latest
    - docker tag $DOCKER_REGISTRY/malwarecage_malwarefront:$CI_COMMIT_SHA malwarecage_malwarefront:latest
    
    - chmod +x gen_vars.sh
    - ./gen_vars.sh test

    - docker-compose up -d
    - docker-compose logs -f -t mwdb-tests
    - ([ $(docker wait malwarecage_mwdb-tests_1) == 0 ])
  after_script:
    - docker-compose logs -t mwdb > artifacts/test/mwdb.log
    - docker-compose logs -t malwarefront > artifacts/test/malwarefront.log
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - artifacts/test/mwdb.log
      - artifacts/test/malwarefront.log
    when: always
    expire_in: 1 week
